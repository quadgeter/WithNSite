import type { NetlifyAPI } from 'netlify';
import { $TSFixMe } from '../../commands/types.js';
import type { SiteInfo, EnvironmentVariableSource } from '../../utils/types.js';
export declare const AVAILABLE_CONTEXTS: string[];
export declare const AVAILABLE_SCOPES: string[];
type EnvironmentVariableContext = 'all' | 'production' | 'deploy-preview' | 'branch-deploy' | 'dev';
type EnvironmentVariableScope = 'builds' | 'functions' | 'runtime' | 'post_processing';
type EnvironmentVariableValue = {
    context: EnvironmentVariableContext;
    context_parameter?: string | undefined;
    value: string;
};
/**
 * @param context The deploy context or branch of the environment variable value
 * @returns The normalized context or branch name
 */
export declare const normalizeContext: (context: string) => string;
/**
 * Finds a matching environment variable value from a given context
 */
export declare const findValueInValues: (
/**
 * An array of environment variable values from Envelope
 */
values: EnvironmentVariableValue[], 
/**
 * The deploy context or branch of the environment variable value
 */
context: string) => EnvironmentVariableValue | undefined;
/**
 * Finds environment variables that match a given source
 * @param env - The dictionary of environment variables
 * @param source - The source of the environment variable
 * @returns The dictionary of env vars that match the given source
 */
export declare const filterEnvBySource: (env: object, source: EnvironmentVariableSource) => typeof env;
/**
 * Filters and sorts data from Envelope by a given context and/or scope
 * @param context - The deploy context or branch of the environment variable value
 * @param envelopeItems - An array of environment variables from the Envelope service
 * @param scope - The scope of the environment variables
 * @param source - The source of the environment variable
 * @returns A dicionary in the following format:
 * {
 *   FOO: {
 *     context: 'dev',
 *     scopes: ['builds', 'functions'],
 *     sources: ['ui'],
 *     value: 'bar',
 *   },
 *   BAZ: {
 *     context: 'branch',
 *     branch: 'staging',
 *     scopes: ['runtime'],
 *     sources: ['account'],
 *     value: 'bang',
 *   },
 * }
 */
export declare const formatEnvelopeData: ({ context, envelopeItems, scope, source, }: {
    context?: string;
    envelopeItems: $TSFixMe[];
    scope?: string;
    source: string;
}) => Record<string, {
    context: string;
    branch: string;
    scopes: string[];
    sources: string[];
    value: string;
}>;
/**
 * Collects env vars from multiple sources and arranges them in the correct order of precedence
 * @param opts.api The api singleton object
 * @param opts.context The deploy context or branch of the environment variable
 * @param opts.env The dictionary of environment variables
 * @param opts.key If present, fetch a single key (case-sensitive)
 * @param opts.raw Return a dictionary of raw key/value pairs for only the account and site sources
 * @param opts.scope The scope of the environment variables
 * @param opts.siteInfo The site object
 * @returns An object of environment variables keys and their metadata
 */
export declare const getEnvelopeEnv: ({ api, context, env, key, raw, scope, siteInfo, }: {
    api: NetlifyAPI;
    context?: string | undefined;
    env: object;
    key?: string | undefined;
    raw?: boolean | undefined;
    scope?: string | undefined;
    siteInfo: SiteInfo;
}) => Promise<{}>;
/**
 * Returns a human-readable, comma-separated list of scopes
 * @param scopes An array of scopes
 * @returns A human-readable, comma-separated list of scopes
 */
export declare const getHumanReadableScopes: (scopes?: (EnvironmentVariableScope | "post-processing")[]) => string;
/**
 * Translates a Mongo env into an Envelope env
 * @param env The site's env as it exists in Mongo
 * @returns The array of Envelope env vars
 */
export declare const translateFromMongoToEnvelope: (env?: Record<string, string>) => {
    key: string;
    scopes: string[];
    values: {
        context: string;
        value: string;
    }[];
}[];
/**
 * Translates an Envelope env into a Mongo env
 * @param envVars The array of Envelope env vars
 * @param context The deploy context or branch of the environment variable
 * @returns The env object as compatible with Mongo
 */
export declare const translateFromEnvelopeToMongo: (envVars?: {
    key: string;
    scopes: string[];
    values: {
        context: string;
        value: string;
        context_parameter?: string | undefined;
    }[];
}[], context?: string) => {};
export {};
//# sourceMappingURL=index.d.ts.map